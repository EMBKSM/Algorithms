#include <bits/stdc++.h>

using namespace std;

struct TrieNode {
    TrieNode* child[2];
    int count;
    TrieNode() {
        child[0] = child[1] = nullptr;
        count = 0;
    }
};

class Trie {
public:
    TrieNode* root;
    Trie() {
        root = new TrieNode();
    }

    void insert(int num) {
        TrieNode* node = root;
        for (int i = 31; i >= 0; --i) {
            int bit = (num >> i) & 1;
            if (!node->child[bit])
                node->child[bit] = new TrieNode();
            node = node->child[bit];
            node->count++;
        }
    }

    void erase(int num) {
        eraseRec(root, num, 31);
    }

    bool eraseRec(TrieNode* node, int num, int bitIdx) {
        if (!node) {
            return false;
        }

        if (bitIdx < 0) {
            node->count--;
            return node->count == 0;
        }
        int bit = (num >> bitIdx) & 1;
        if (!node->child[bit]) {
            return false;
        }

        bool shouldDelete = eraseRec(node->child[bit], num, bitIdx - 1);

        if (shouldDelete) {
            delete node->child[bit];
            node->child[bit] = nullptr;
        }
        if (bitIdx < 31) {
            node->count--;
        }

        return node->child[0] == nullptr && node->child[1] == nullptr && node->count == 0;
    }

    int maxXor(int num) {
        TrieNode* node = root;
        int result = 0;
        for (int i = 31; i >= 0; --i) {
            int bit = (num >> i) & 1;
            if (node->child[1 - bit] && node->child[1 - bit]->count > 0) {
                result |= (1 << i);
                node = node->child[1 - bit];
            }
            else if (node->child[bit] && node->child[bit]->count > 0) {
                node = node->child[bit];
            }
            else {
                return 0;
            }
        }
        return result;
    }
};

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int n;
    cin >> n;

    Trie trie;
    trie.insert(0);

    for (int i = 0; i < n; ++i) {
        int cmd, m;
        cin >> cmd >> m;
        switch (cmd) {
        case 1:
            trie.insert(m);
            break;
        case 2:
            trie.erase(m);
            break;
        case 3:
            cout << trie.maxXor(m) << "\n";
            break;
        }
    }
}
