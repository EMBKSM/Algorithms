#include <bits/stdc++.h>

using namespace std;

int cnt = 0;
vector<int> numberss;

vector<int> compute_pi(const string& pattern) {
    int m = pattern.size();
    vector<int> pi(m, 0);
    int j = 0;

    for (int i = 1; i < m; ++i) {
        while (j > 0 && pattern[i] != pattern[j]) {
            j = pi[j - 1];
        }
        if (pattern[i] == pattern[j]) {
            ++j;
            pi[i] = j;
        }
    }
    return pi;
}

void kmp_search(const string& text, const string& pattern) {
    int n = text.size();
    int m = pattern.size();
    vector<int> pi = compute_pi(pattern);
    int j = 0;

    for (int i = 0; i < n; ++i) {
        while (j > 0 && text[i] != pattern[j]) {
            j = pi[j - 1];
        }
        if (text[i] == pattern[j]) {
            if (j == m - 1) {
                cnt++;
                numberss.push_back(i - m + 2);
                j = pi[j];
            }
            else {
                ++j;
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    string text, pattern;
    getline(cin, text);
    getline(cin, pattern);

    kmp_search(text, pattern);

    cout << cnt << "\n";
    for (auto a : numberss) {
        cout << a << " ";
    }
    return 0;
}